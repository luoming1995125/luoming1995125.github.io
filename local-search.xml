<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux Kernel Project</title>
    <link href="/2023/08/22/Linux-Kernel-Project/"/>
    <url>/2023/08/22/Linux-Kernel-Project/</url>
    
    <content type="html"><![CDATA[<h1 id="開發環境和版本資訊"><a href="#開發環境和版本資訊" class="headerlink" title="開發環境和版本資訊"></a>開發環境和版本資訊</h1><ul><li>Virtual Machine: VirtualBox</li><li>Linux Release: Fedora 6 (32-bit)<br>— <a href="http://archive.fedoraproject.org/pub/archive/fedora/linux/core/6/i386/iso/FC-6-i386-DVD.iso">http://archive.fedoraproject.org/pub/archive/fedora/linux/core/6/i386/iso/FC-6-i386-DVD.iso</a></li><li>Kernel Version: Linux-2.6.18(32-bit)<br>— <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.18.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/v2.6/linux-2.6.18.tar.gz</a><br>— <code>tar -zxvf linux-2.6.18.tar.gz -C /usr/src</code></li></ul><h1 id="安裝fedora-Core-6-2-6-18"><a href="#安裝fedora-Core-6-2-6-18" class="headerlink" title="安裝fedora Core 6 2.6.18"></a>安裝fedora Core 6 2.6.18</h1><p>Vmware 16 安裝不成功..<br>使用virtualbox安裝 需開啟I&#x2F;O APIC</p><ul><li>I&#x2F;O APIC VirtualBox 文檔<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs !">這是VirtualBox文檔：<br><br>啟用I / O APIC<br><br>高級可編程中斷控制器（APIC）是一種較新的x86硬件功能，近年來已取代了舊式的可編程中斷控制器（PIC）。通過I / O APIC，操作系統可以使用16個以上的中斷請求（IRQ），因此避免了IRQ共享，從而提高了可靠性。<br><br>注意注意：對於64位客戶機操作系統，尤其是Windows Vista，需要啟用I / O APIC。如果要在一台虛擬機中使用多個虛擬CPU，則也需要這樣做。<br><br>但是，對於Windows以外的某些操作系統，對I / O APIC的軟件支持一直不可靠。另外，使用I / O APIC會稍微增加虛擬化的開銷，因此會稍微降低客戶機OS的速度。<br><br>警告注意：從Windows 2000開始的所有Windows操作系統都根據I / O APIC是否可用安裝不同的內核。因此，與ACPI一樣，在安裝Windows來賓操作系統之後，不得關閉I / O APIC。但是，安裝後將其打開將無效。<br></code></pre></td></tr></table></figure></li></ul><h1 id="Kernel編譯"><a href="#Kernel編譯" class="headerlink" title="Kernel編譯"></a>Kernel編譯</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs !"># make clean<br># make mrproper<br># cp /boot/config... ./.config<br># make bzImage<br># make modules<br># make modules_install<br># make install     <br></code></pre></td></tr></table></figure><h1 id="Virtual-Memory概念"><a href="#Virtual-Memory概念" class="headerlink" title="Virtual Memory概念"></a>Virtual Memory概念</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">基本上每個Process都有獨立的虛擬記憶體空間，32位元機器虛擬記憶體定址為4GB，64位元機器可達到2^64 bytes。<br></code></pre></td></tr></table></figure><ul><li><p>process為OS分配系統資源(memory)的單位，thread為OS分配CPU time的單位</p></li><li><p>Process</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">一個elf binary檔案在 disk 上叫 user program， load進memory 開始執行後就變成 process<br>有自己的address space =&gt;code section, data section, bss section、stack、heap<br>Linux 通常把process當做是task，PCB (processing control block) 通常也稱為 struct tast_struct<br></code></pre></td></tr></table></figure></li><li><p>thread:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs !">Thread 被稱為輕量級process，它是系統調度最小單位，thread與process差別在於process有獨立的資源空間，而thread則共享process的address<br>共享process的address space =&gt; code section, data section<br>thread有自己的program counter, cpu register, stack<br>Linux 並沒有特定的data structure來標示thread or process，thread與process都使用process的PCB<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/vGHFff2.png"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">Process and task_struct<br>Linux用task_struct來描述一個process，透過task_struct-&gt;mm-&gt;mmap可以找到vm_area_struct，linux用利用VMA(virtual memory area)來描述每個segment特性，大小<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/0vOXdsL.png"></p><ul><li>mm_sturct<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs !">struct mm_struct &#123;<br>    struct vm_area_struct * mmap;        /* list of VMAs */<br>    struct rb_root mm_rb;<br>    unsigned long mmap_base;        /* base of mmap area */<br>    unsigned long task_size;        /* size of task vm space */<br>    pgd_t * pgd;<br>    atomic_t mm_count;            /* How many references to &quot;struct mm_struct&quot; (users count as 1) */<br>    int map_count;                /* number of VMAs */<br><br>    unsigned long start_code, end_code, start_data, end_data;<br>    unsigned long start_brk, brk, start_stack;<br>    unsigned long arg_start, arg_end, env_start, env_end;<br><br>    struct file *exe_file;<br><br>    /* ... some code omitted ... */<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="編譯結果"><a href="#編譯結果" class="headerlink" title="編譯結果"></a>編譯結果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs !">大致上的想法在kernel space的mm_struct取得segment info，<br>再回傳到user space<br><br>data、bss、code、libary segment共享記憶體<br>stack、local storage、heap segment記憶體區塊不相同<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/NV1HwVb.png"><br><img src="https://i.imgur.com/WPgK62X.png"></p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><ul><li><p>user space</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs !">撰寫 tmp/test.c <br>user呼叫三個線程，分別呼叫syscall 318<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span>* <span class="hljs-title function_">thread_func</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start_code_size, start_code_start, start_code_end;<br><span class="hljs-type">int</span> ret;<br><br>ret = syscall(<span class="hljs-number">318</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">pthread_t</span> threadl, thread2, thread3;<br><br>pthread_create(&amp;thread1, <span class="hljs-literal">NULL</span>, thread_func, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;thread2, <span class="hljs-literal">NULL</span>, thread_func, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;thread3, <span class="hljs-literal">NULL</span>, thread func, <span class="hljs-literal">NULL</span>);<br><br>pthread_join(threadl, <span class="hljs-literal">NULL</span>);<br>pthread_join(thread2, <span class="hljs-literal">NULL</span>);<br>pthread_join(thread3, <span class="hljs-literal">NULL</span>) ;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>kernel space</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs !">添加syscall 318 kernel/project.c<br>利用task_struct-&gt;mm_struct-&gt;vm_area_struct結構去找所有virtual address的start,end<br>利用Printk印出每個segment的start,end<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//syscall(318)</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LINUX_PROJECT</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LINUX PROJECT</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/linkage.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm/uaccess.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segment</span> <span class="hljs-title">info</span>&#123;</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end;<br><span class="hljs-type">char</span> type[<span class="hljs-number">16</span>];<br>&#125;;<br><br>asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_project</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> segment_info *info)</span>&#123;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm</span> <span class="hljs-title">area</span> <span class="hljs-keyword">struct</span> *<span class="hljs-title">vma</span>;</span><br><br>mm = &amp;current-&gt;mm;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (vma = mm-&gt;mmap; vma; vma= vma-&gt;vm_next)&#123;<br><br><span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; VM_EXEC)&#123;<br>printk(<span class="hljs-string">&quot;Code segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start,vma-&gt;vm_end);<br><span class="hljs-comment">//strcpy(info[1].type, &quot;code&quot;) ;</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; VM_WRITE)&#123;<br> <span class="hljs-keyword">if</span> (vma-&gt;vm flags &amp; VM_GROWSDOWN)&#123;<br>printk(<span class="hljs-string">&quot;Stack Segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br><br><span class="hljs-comment">//strcpy(info[1].type, &quot;Stack&quot;);</span><br> &#125;<span class="hljs-keyword">else</span>&#123;<br>printk(<span class="hljs-string">&quot;Data/Heap Segment: &amp;lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br><span class="hljs-comment">//strcpy(info[1].type, &quot;Data/Heap&quot;);</span><br> &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br> printk(<span class="hljs-string">&quot;Other Segment: %lx - %lx\n&quot;</span>, vma-&gt;vm_start, vma-&gt;vm_end);<br> <span class="hljs-comment">//strcpy(info[1].type, &quot;Other&quot;) ;</span><br>&#125;<br><span class="hljs-comment">//_put_user(vma-&gt;vm_start, &amp;info[i].start, unsigned long);</span><br><span class="hljs-comment">//_put_user(vma-&gt;vm_end, &amp;info[i].end, unsigned long);</span><br><span class="hljs-comment">//i++;</span><br>&#125;<br><br><span class="hljs-comment">//copy to user(info, info, sizeof(struct segment_info));</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure></li></ul><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><ol><li><p>哪些segment是共享的?</p><blockquote><p>data bss code libary這四個segment是共享記憶體，stack、local storage、heap這三個segment則是不相同記憶體位置。</p></blockquote></li><li><p>heap的位置不一樣，為什麼?</p><blockquote><p>因為 heap 區域是一個記憶體區域，用於動態分配記憶體，每個 thread 都有自己的 heap 區域可以使用，所以它們的位置會不同。</p><p>雖然heap位置不相同，但其實也是共享的，其會根據libary或OS不同會有特殊的情況，例如linux是用C語言，heap會用malloc的方式實做，它會先去memory pool找一個可以使用的記憶體區塊(free list)，會在從free list裡面分給每個線程heap，所以heap段會是不同的。</p></blockquote></li><li><p>Thread local storage是用甚麼東西實作?</p><blockquote><p>會使用__thread，在宣告的時候加__thread就代表這個東西是TLS。</p></blockquote></li><li><p>每個thread的TLS會不同，這些thread之間可以去存取對方的TLS嗎?</p><blockquote><p>TLS是不同的，但是他們之間是可以互相存取的。</p></blockquote></li><li><p>建造多執行緒的寫法是?</p><blockquote><p>pthread_create。<br>pthread 的 pthread_create 函數可以用來建立新的執行緒，並以函數指標指定子執行緒所要執行的函數，子執行緒在建立之後，就會以平行的方式執行，在子執行緒的執行期間，主執行緒還是可以正常執行自己的工作，最後主執行緒再以 pthread_join 函數等待子執行緒執行結束，處理後續收尾的動作。</p><p>參考資料:<br><a href="https://ascii-iicsa.blogspot.com/2011/10/thread-local-storage.html">https://ascii-iicsa.blogspot.com/2011/10/thread-local-storage.html</a></p></blockquote></li><li><p>pthread_create函數會去使用什麼system call?如何調用?</p><blockquote><p>pthread_create會使用clone()這個system call，clone()會再去call do_fork這個function，do_fork會再去call copy_process，copy_process中有個copy_mm，linux實做共享記憶體的部分就是靠copy_mm達成。</p></blockquote></li><li><p>為什麼要使用copy from user?</p><blockquote><p>原理:因為安全機制的考量，程式載入的資料不會馬上放到記憶體上，會一直等到真的使用的時候才放到記憶體上。kernel要去使用這個資料的時候假如不在記憶體上，這種時候kernel會直接crash。</p><p>copy_from_user首先會檢查傳入地址的合法性，檢查後合法才會去做copy，同時也有修復機制避免系統直接crash。</p><p>這個問題主要涉及到2個層面，一個是copy_from_user()有自帶的access_ok檢查，如果用戶傳進來的buffer不屬於用戶空間而是內核空間，根本不會拷貝；二是copy_from_user()有自帶的page fault後exception修復機制。</p></blockquote></li></ol><p><img src="/image-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nycu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rev-AmateursCTF2023-Volcano</title>
    <link href="/2023/07/27/Rev-AmateursCTF2023-Volcano/"/>
    <url>/2023/07/27/Rev-AmateursCTF2023-Volcano/</url>
    
    <content type="html"><![CDATA[<ul><li>DIE<br><img src="https://i.imgur.com/21DREUc.png" alt="Image"></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">透過_libc_start_main進入main <span class="hljs-keyword">function</span>，根據題目，給他需要的bear以及volcano，最後再找出符合判斷式的結果。<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/c3mSRqw.png" alt="Image"></p><ul><li><p>sub.c</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdbool.h&gt;</span><br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_1209(int x) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v3;<br><br>    v3 = 0;<br><br>    while(x)&#123;<br>        ++v3;<br>        x /= 10;<br>    &#125;<br><br>   <span class="hljs-built_in"> return </span>v3;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_124D(int x) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v3 = 0;<br><br>    while (x)&#123;<br>        v3 += x % 10;<br>        x /= 10;<br>    &#125;<br>   <span class="hljs-built_in"> return </span>v3;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>sub_1430(int a,<span class="hljs-built_in"> int </span>b,<span class="hljs-built_in"> int </span>c) &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v5;<br>   <span class="hljs-built_in"> int </span>v6 = 1;<br>    v5 = a % c;<br><br>    while (b)&#123;<br>       <span class="hljs-built_in"> if </span>((b&amp;1)!=0)<br>            v6 = v5 * v6%c;<br>        b &gt;&gt;= 1;<br>        v5 = v5 * v5 % c;<br>    &#125;<br>   <span class="hljs-built_in"> return </span>v6;<br>&#125;<br><br>bool isbear(unsigned<span class="hljs-built_in"> int </span>bear)&#123;<br><br>   <span class="hljs-built_in"> if </span>((bear &amp; 1) != 0)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 3) !=2)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 5) != 1)<br>       <span class="hljs-built_in"> return </span>false;<br>   <span class="hljs-built_in"> if </span>((bear % 7) == 3)<br>       <span class="hljs-built_in"> return </span>bear % 0x6D == 55;<br>    <br>   <span class="hljs-built_in"> return </span>false;<br><br>&#125;<br><br>bool isvol(unsigned<span class="hljs-built_in"> int </span>v)&#123;<br><br><br>    unsigned<span class="hljs-built_in"> int </span>result;<br><br>    result = 0;<br><br>    while (v)&#123;<br>        result += v &amp; 1;<br>        v &gt;&gt;= 1;<br>    &#125;<br><br>   <span class="hljs-built_in"> return </span>result &gt; 0x10 &amp;&amp; result &lt;= 0x1A;<br>&#125;<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>main() &#123;<br>    <br>   <span class="hljs-built_in"> int </span>v9;<br>   <span class="hljs-built_in"> int </span>v10 = 4919;<br>   <span class="hljs-built_in"> int </span>volcano;<br>   <span class="hljs-built_in"> int </span>bear;<br>    printf(<span class="hljs-string">&quot;Finding numbers that satisfy the conditions...\n&quot;</span>);<br>    <br><br>    for (unsigned<span class="hljs-built_in"> int </span>bear = 0; bear &lt; 1000000; bear++) &#123;<br>       <span class="hljs-built_in"> if </span>(isbear(bear)) &#123;<br>            for (unsigned<span class="hljs-built_in"> int </span>volcano = 0; volcano &lt; 1000000; volcano++) &#123;<br>               <span class="hljs-built_in"> if </span>(isvol(volcano) &amp;&amp;<br>                    sub_1209(volcano) == sub_1209(bear) &amp;&amp;<br>                    sub_124D(volcano) == sub_124D(bear)) &#123;<br>                    for (v9 = 3; v9 &lt; 1000000; v9 += 2) &#123;<br>                       <span class="hljs-built_in"> if </span>(v9 != 1 &amp;&amp;<br>                            sub_1430(v10, volcano, v9) == sub_1430(v10, bear, v9)) &#123;<br>                            printf(<span class="hljs-string">&quot;Found a number that satisfies the conditions: %d\n&quot;</span>, v9);<br>                            printf(<span class="hljs-string">&quot;bear: %u, volcano: %u\n&quot;</span>, bear, volcano);<br>                           <span class="hljs-built_in"> return </span>0;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>   <span class="hljs-built_in"> return </span>0;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/mSbkemi.png" alt="Image"></p></li><li><p>FLAG</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">amateursCTF&#123;yep_th0se_l00k_th3_s4me_to_m3!_:clueless:&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>REV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GCP 安裝 Chrome-Remote-Desktop</title>
    <link href="/2023/07/25/GCP-%E5%AE%89%E8%A3%9D-Chrome-Remote-Desktop/"/>
    <url>/2023/07/25/GCP-%E5%AE%89%E8%A3%9D-Chrome-Remote-Desktop/</url>
    
    <content type="html"><![CDATA[<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GCP</span> N1<br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">22</span>.<span class="hljs-number">04</span> LTS x86_64 <br></code></pre></td></tr></table></figure><h2 id="VPS安裝Chrome遠端桌面"><a href="#VPS安裝Chrome遠端桌面" class="headerlink" title="VPS安裝Chrome遠端桌面"></a>VPS安裝Chrome遠端桌面</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">wget https://<span class="hljs-keyword">dl</span>.google.<span class="hljs-keyword">com</span>/linux/direct/chrome-remote-desktop_current_amd64.<span class="hljs-keyword">deb</span><br><br>sudo apt-<span class="hljs-built_in">get</span> install --assume-yes ./chrome-remote-desktop_current_amd64.<span class="hljs-keyword">deb</span><br></code></pre></td></tr></table></figure><h2 id="安裝桌面環境"><a href="#安裝桌面環境" class="headerlink" title="安裝桌面環境"></a>安裝桌面環境</h2><ul><li><p>更新存儲庫</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo apt <span class="hljs-keyword">update</span> <span class="hljs-variable">&amp;&amp;</span> sudo apt upgrade<br></code></pre></td></tr></table></figure></li><li><p>安裝並設置顯示管理器。使用slim是因為它的輕量級特性</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> slim<br></code></pre></td></tr></table></figure></li><li><p>安裝Ubuntu桌面環境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> ubuntu-desktop<br></code></pre></td></tr></table></figure></li><li><p>安裝完成後，重啟機器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo reboot</span><br></code></pre></td></tr></table></figure></li><li><p>重啟後會失去連接。再次通過 SSH 進入虛擬機啟動 slim</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo service slim <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="配置Chrome-Remote-Desktop"><a href="#配置Chrome-Remote-Desktop" class="headerlink" title="配置Chrome-Remote-Desktop"></a>配置Chrome-Remote-Desktop</h2><ul><li><p>設定其他電腦，並持續下一步<br><img src="https://i.imgur.com/L4RwNfq.png" alt="Image"></p></li><li><p>將最後一步指令複製到VPS主機上<br><img src="https://i.imgur.com/ZHE9iEE.png" alt="Image"></p></li><li><p>輸入六位數PIN，即可成功<br><img src="https://i.imgur.com/ixZP3eZ.png" alt="Image"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
